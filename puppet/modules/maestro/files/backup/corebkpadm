#!/bin/bash
# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# -- "corebkpadm V 0.02"
# -- proyected to run as core manager of backups
# -- will search for folders:
# -- control errors
# -- control history
# -- clean old backup folders
# -- check on FS space
# -- synchronize remote and local folders.
# --=--=--= mfpath=$( find $maincont -type d -name "$appsnm" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }' )

lisbkps=""                                            #--- array  that contains the folders of the current week backups
maincont="/mnt/backups"                              #--- contains the base path for the backups
mainlogstate="$maincont/bkpgen.log"                   #--- name and path of the log file of backup checklist
bkpflag="/mnt/backups/bck.yaml"                       #--- setup the path where status output .yaml will be stored
Wcheck="4"                                            #--- amount of bkp packages history we want
evtime=$(date +%d/%m-%k:%M:%S)                        #--- set for log events
year=$(date +'%Y')                              
currentday=$(date +'%-d')                         #--- usable on daily bkp checks
currentweek=$(date +'%Y-%W')
bkppusage=""                                     #--- percentage value of use by bkps folder in the Filesystem
berrcont="0"                                      #--- util error counter
appname=('jenkins' 'zuul' 'gerrit' 'pastebin' 'wiki' ) #--- appname validator                                    
hostnam=('maestro' 'util' 'review' 'ci' 'eroplus' )              #--- hostname validator
listhost=""                                            #--- flexible array to list and check the available host backedup
tmpfile="/mnt/backups/tmpswap.txt"
daycheck="1"                                     #activates the checking 
# Notes:
#find ./ -type d -name "$year*$(( $(date +'%W' )))*"
#find ./ -type d -name "$year*$(( $(date +'%W' ) -3 ))*" older weeks than "certain-value"

function bdamnp { ##--- perfoms simple operations for retrieve % of use of general on the filesystem
   bkpfsz=$( du -ac --max-depth=0 $maincont |sed -n 's/total/ /p')
   sofs=$(( $(df $maincont | sed -n '/2/p' | awk ' { print $2 } ') /100 ))
   sofs=$(( $(df $maincont | sed -n '2p' |awk ' {print $2 }') /100 ))
   bkppusage=$(($bkpfsz/$sofs))
   echo "backup :" >> $bkpflag
   echo "   fs-usage : $bkppusage " >> $bkpflag
   echo "   location : $maincont " >> $bkpflag
}

function sweeplist () { #--- sweeps old bkp history =--=--=
    mfpath=$1
    bkhs=$(find  $mfpath/* -maxdepth 0 -type d -name "*$year*" | wc -l)
    # "start backup history check ---"
    if [ $daycheck == $(date +%u) ] ; then
          if (( $bkhs > $Wcheck )) ; then
             bkhlist=($(find  $mfpath/* -maxdepth 0 -type d -name "*$year*" | sort -gr ))
             rm -rf ${bkhlist[$Wcheck]}
             #find $maincont -name "*$(( $(date +'%V') - 1))*.tar.gz"
          fi
    fi
}

# ----------- block of functions that provide a check and information for daily backups -----------------------
#--------------------------------------------------------------------------------------------------------------

function hostsfold { #--- list the host folders and reports the fs-usage
 #   sofs=$(( $(df $maincont | sed -n '/2/p' | awk ' { print $2 } ') /100 ))
    sofs=$(( $(df $maincont |sed -n '2p' | awk ' {print $2 }' ) /100 ))
    > $tmpfile
    for hostfold in ${hostnam[@]}; do
         hostsizf=$( find $maincont -type d -name "*$hostfold*" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $1 } ')
         if [[ -n "$hostsizf" ]]; then
                bkppusage=$( printf "%.2f" $( echo "" | awk "{ print $hostsizf/$sofs }" ) )
                echo "$hostfold : " >>$tmpfile
                echo "   fs-usage : $bkppusage" >>$tmpfile
         else
                echo "$hostfold : " >>$tmpfile
                echo "   fs-usage : 0" >>$tmpfile
                berrcont=$(( $berrcont + 1 ))
         fi
    done
}

function chmodlog (){
  logfile=$1
  chmod +r $logfile
}

function loglist (){ #--- validates the existance of a log file call
   mfpath=$1
   logfile=$( ls $mfpath/*.log )
   chmodlog $logfile
   echo "          log_path: $logfile" >>$tmpfile
}

function appsfold { #--- list the app folders and reports fs and backup status
    sofs=$(( $(df $maincont | sed -n '/2/p' | awk ' { print $2 } ') /100 ))
    for appfold in ${appname[@]}; do 
             appsnm=$( find $maincont -type d  -path "*$appfold*" | sed -n '1p' | awk ' BEGIN { FS="/" } { print $5 } ' )
          mainfappsz=$( find $maincont -type d -name "$appsnm" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $1 }')
          mfshumread=$( find $maincont -type d -name "$appsnm" -exec du -ach --max-depth=0 {} \; | sed -n '1p' | awk ' { print $1 }')
          currwbkpsz=$( find $maincont -type d  -path "*$appsnm/$currentweek" -exec du -ach --max-depth=0 {} \; | sed -n '1p' | awk ' { print $1 }' )
          currwbkfld=$( find $maincont -type d  -path "*$appsnm/$currentweek" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }' )
          # currdayobj=$(ls -l $currwbkfld/$appsnm | grep objects | awk ' { print $7 }')
              if [[ -n "$appsnm" ]]; then
                            currdayobj=$(ls -l $currwbkfld/$appsnm | grep objects | awk ' { print $7 }')
                            mfpath=$( find $maincont -type d -name "$appsnm" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }' )
                            sweeplist $mfpath
                       if  [[ -n "$currwbkfld" ]]; then  #--- checks on the availability of lastweek backup folder. "currwbkfld"
	                       mylogpath=$(find $maincont -type d  -path "*$currwbkfld/*$appsnm*/bkphist" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }')
                               if (( $currentday == $currdayobj )); then  #--- checks on current day backup status
        	                       echo "$appfold :" >>$tmpfile
                	               bkppusage=$( printf "%.2f" $(echo "" | awk " { print $mainfappsz/$sofs } ") )
                        	       echo "     fs-usage : $bkppusage" >>$tmpfile
	                               echo "     backup : " >>$tmpfile
	                               cbak="$(date +'%Y%W%d')" >>$tmpfile
	                               echo "          time : $cbak " >>$tmpfile
	                               echo "          size : $currwbkpsz" >>$tmpfile
                                       echo "          total: $mfshumread" >>$tmpfile
	                               echo "          status: Online" >>$tmpfile
                                       loglist $mylogpath
	                       elif ((  $currentday > $currdayobj )); then #--- checks on online or offline for current day backup -1 ...
        	                       echo "$appfold :" >>$tmpfile
                	               bkppusage=$( printf "%.2f" $(echo "" | awk " { print $mainfappsz/$sofs } ") )
                        	       echo "     fs-usage : $bkppusage" >>$tmpfile
	                               echo "     backup : " >>$tmpfile
        	                       lstdbk=$( tail -n 1 $currwbkfld/$appsnm/bkphist/$appsnm".log" | awk ' BEGIN { FS=":" } { print $2 } ' | cut -d " " -f2 | awk 'BEGIN { FS="/" } { print $1 }')
	                               echo "          time : $(date +'%Y%W')$lstdbk " >>$tmpfile
	                               echo "          size : $currwbkpsz" >>$tmpfile      #--- currwbkpsz
                                       echo "          total: $mfshumread" >>$tmpfile
	                               if (( $(( $currentday - $lstdbk)) >= 2 )) ; then
	                                      echo "          status: Offline" >>$tmpfile
	                                      berrcont=$(( $berrcont + 1 ))
	                               else
        	                              echo "          status: Online" >>$tmpfile
                	               fi
                                       loglist $mylogpath
	                       fi
	              elif [ -z "$currwbkfld" ]; then
                        lastweek=$( echo $(date +'%Y-')$(($(date +'%W') -1)))
	                currwbkfld=$(find $maincont -type d  -path "*$appsnm*/$lastweek*" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }' )
                        currwbkpsz=$( find $maincont -type d  -path "*$appsnm/$lastweek*" -exec du -ach --max-depth=0 {} \; | sed -n '1p' | awk ' { print $1 }' )
	                mylogpath=$(find $maincont -type d  -path "*$currwbkfld/*$appsnm*/bkphist" -exec du -ac --max-depth=0 {} \; | sed -n '1p' | awk ' { print $2 }')
        	       #--- check to have last week backup for the application
                	             echo "$appfold :" >>$tmpfile
	                             bkppusage=$( printf "%.2f" $(echo "" | awk " { print $mainfappsz/$sofs } ") )
	                             echo "     fs-usage : $bkppusage" >>$tmpfile
	                             echo "     backup : " >>$tmpfile
	                             lstdbk=$( tail -n 1 $currwbkfld/$appsnm/bkphist/$appsnm".log" | awk ' BEGIN { FS=":" } { print $2 } ' | cut -d " " -f2 | awk 'BEGIN { FS="/" } { print $1 }' )
	                             echo "          time : $(date +'%Y')$(($(date +'%W')-1))$lstdbk " >>$tmpfile
	                             echo "          size : $currwbkpsz" >>$tmpfile        #--- currwbkpsz
                                     echo "          total: $mfshumread" >>$tmpfile
	                             echo "          status: Offline" >>$tmpfile
	                             berrcont=$(( $berrcont + 1 ))
                                     loglist $mylogpath
                      fi
       	      elif [[  -z $appsnm ]]; then #"$( find $maincont -type d -name "*$appfold*" )" ]]; then
	                     echo "$appfold :" >>$tmpfile
	                     echo "     fs-usage : 0" >>$tmpfile
	                     echo "     backup : " >>$tmpfile
	                     echo "          time : N/A " >>$tmpfile
	                     echo "          size : 0" >>$tmpfile
                             echo "          total: 0" >>$tmpfile
	                     echo "          status: Offline" >>$tmpfile
                             echo "          log_path: N/A" >>$tmpfile
       	     fi
    done
}

function cblist {   #--- will search for the last date folders week and validate the current date 
    lisbkps=($(find $maincont -type d -name "$currentweek"))
    > $bkpflag
#    if [ -z ${lisbkps[@]} ]; then
    hostsfold
    appsfold
    echo "---">$bkpflag
    echo "# \"fs-usage\" values are percentage usage representacion eg: \"fs-usage : 1 \" where 1 = 1% " >> $bkpflag
    echo "# \"size\" values describe the size of the last backup package stored, which is a week full backup " >> $bkpflag
    echo "# \"total\" values sizes the total amount of 4 week history backups for an App" >> $bkpflag
    echo "# \"status\" is a validation of the state of backup performance offline means \"none\" or more than 24 hours without backup" >> $bkpflag
    echo "# status: 0 - OK, 1 - Warning, 2 - Critical">>$bkpflag
    echo "# backup sizes: in MB, Gig">>$bkpflag
    echo "# backup: location on maestro all backups are stored">>$bkpflag
    if [ "$berrcont" -eq "0" ]; then
           echo "status: 0" >> $bkpflag
           bdamnp            
    elif [ "$berrcont" -eq "2" ] ; then
           echo "status: 1" >> $bkpflag  
           bdamnp
    elif (( $berrcont >= 3 )) ;then
           echo "status: 2" >> $bkpflag
           bdamnp
    fi
    cat $tmpfile >> $bkpflag
    rm $tmpfile
    chmod 766 $bkpflag
}



#--------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
cblist

