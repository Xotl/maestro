# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# Openstack runtime layout - Version 0.01
#

# This file represents a 'final' layout, merged between a blueprint and a layout. I called it runtime layout.
# It represents what the python memory structure will have in the layout data to build puppet files thanks to data merged between BP and layout.
# This is like an intermediate state before generating puppet code.
#

# From this python memory structure, the script will generates 2 files per servers:
# - hieradata. We will have a file per servers.
#   blueprints/openstack/puppet/modules/runtime_project/files/hiera/hieradata/Debian/nodetype/*.yaml
# - server module.
#   Instead of having a big site.pp, I would recommend to use a server module. it is like a manifest file. each of them are loaded, serially and build internally the site.pp equivalent.
#   This file will be generated with the node
# - site.pp
#   site.pp will need to be replaced by a collection of files. See http://docs.puppetlabs.com/puppet/latest/reference/dirs_manifest.html
#   Currently, I have updated site.pp to reflect a simplified util section. But this should be stored under a <server>.pp
#
# the hieradata will be composed by:
# 1. classes. 
#    This will be an merged extraction of 'classes'.
# 2. classes data.
#    This will be an extraction of 'class_params'. each params will be prefixed by '<application>::' where <application> is the node application name
# 3. addtionnal data, like packages
#    Any additionnal data will be extracted from a template file. if a module requires more default data, packages, those files will be located in hiera_template
#
# the collection of files will contains a node matching string using defaults. each file represents a puppet file.
# the content on this declaration can be extracted from the module 'module_template'
#
# We decided that keeping this temporary structure as a compiled way to represent a kit make sense, for several Maestro services, like ui.
# By this way, we can read the kit definition, easily, by loading the layout runtime in any tool we need and do the work.
# No need to read back the blueprint instead of the default layout file.

blueprint-deploy:
   blueprint : openstack-1.0     # This is the blueprint source file used to build this one.
   layout: openstack-layout.yaml # This is the layout source file used to build this one.
   maestro_ui: # Represent a compiled data exposed to the ui related to openstack kit.
     objects: # <= read by maestro UI
       - projects:
         type: list
         data_provider: /usr/lib/maestro/bin/kit-project.py --list --json
         data-struct:
          - name: project
            type: string
         actions:
          - create_project:
            title: Create
            icon: 
              file: prj-add.png
              content : (--- base64 encoded ---)
            command: /usr/lib/maestro/bin/kit-project.py --create ${project}
          - delete_project:
            title: Delete project
            icon:
              file: prj-del.png
              content : (--- base64 encoded ---)
            command: /usr/lib/maestro/bin/kit-project.py --delete ${project}
   servers: <= read by Maestro ui and python script to build the puppet code.
     - util: # This define the server which will have a list of application installed.
       name: util
       applications:
        - status:
          hiera:
            classes:
              - maestro::node_vhost_lookup
              - cdk_project::status
            class_params:
              - cdk_project::status::vhost_name: %{::maestro::node_vhost_lookup::vname}
              - cdk_project::status::graphite_url: "http://%{::maestro::node_vhost_lookup::vname}:8081"
              - cdk_project::status::static_url: "http://%{::maestro::node_vhost_lookup::vname}:8080"
              - cdk_project::status::maestro_url: "http://%{::eroip}"
            template: modules/cdk_project/files/status.yaml.erb
          puppet_module: modules/cdk_project/files/status.pp.erb
        - graphite:
          services: # <= read by maestro UI
            home-url: json('/graphite/home_url')
            setting-url: json('/graphite/setting-url')
            icon: graphite.png # or http://..../graphite.png
          hiera:
            classes:
              - cdk_project::graphite
            class_params:
              - cdk_project::graphite::vhost_name: %{::maestro::node_vhost_lookup::vname}
              - cdk_project::graphite::graphite_admin_user: ''
              - cdk_project::graphite::graphite_admin_email: ''
              - cdk_project::graphite::graphite_admin_password: ''
            template: modules/cdk_project/files/graphite.yaml.erb
          module_template: modules/cdk_project/files/graphite.pp.erb
        - paste:
          services: # <= read by maestro UI
            home-url: json('/paste/home_url')
            icon: paste.png
          hiera:
            classes:
              - cdk_project::paste
            class_params:
              - cdk_project::paste::vhost_name: %{::maestro::node_vhost_lookup::vname}
              - cdk_project::paste::site_name: 'cdkdev'
            template: modules/cdk_project/files/paste.yaml.erb
          puppet_module: modules/cdk_project/files/paste.pp.erb
