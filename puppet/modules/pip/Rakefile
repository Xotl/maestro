# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
require 'rake'
require 'rspec/core/rake_task'

require 'rubygems'
require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-lint/tasks/puppet-lint'


PuppetLint.configuration.fail_on_warnings = true

# Disable check due to complexity added while reading/writing manifests
PuppetLint.configuration.send('disable_80chars')

# Disable check due to upstream bug: https://github.com/rodjek/puppet-lint/issues/170
PuppetLint.configuration.send('disable_class_parameter_defaults')

# Disable check, no need to be compatible with Puppet 2.6.2 and earlier
PuppetLint.configuration.send('disable_class_inherits_from_params_class')


#
# task definitions
#
Rake::Task["spec"].clear
desc "Default spec execution"
task :spec do |t, args|
  Rake::Task['pip:spec'].invoke(args[0])
end

namespace :pip do
  desc "Setup default _spec test"
  RSpec::Core::RakeTask.new(:spec_standalone) do |t|
    t.rspec_opts = ['--color']
    t.pattern = 'spec/{facter,classes,defines,unit,functions,hosts}/**/*_spec.rb'
  end
  
  desc "pip test."
#  task :spec, [:fog_spec] => ['cloudcreds:spec_noclean'] do |t, args|
  task :spec do |t, args|
    Rake::Task['pip:spec_prep'].invoke
    Rake::Task['pip:spec_standalone'].invoke
    Rake::Task['pip:spec_clean'].invoke
  end

  desc "Create the fixtures directory"
  task :spec_prep do
    fixtures("repositories").each do |remote, opts|
      if opts.instance_of?(String)
        target = opts
        ref = "refs/remotes/origin/master"
      elsif opts.instance_of?(Hash)
        target = opts["target"]
        ref = opts["ref"]
      end

      unless File::exists?(target) || system("git clone #{remote} #{target}")
        fail "Failed to clone #{remote} into #{target}"
      end
      system("cd #{target}; git reset --hard #{ref}") if ref
    end

    FileUtils::mkdir_p("spec/fixtures/modules")
    fixtures("symlinks").each do |source, target|
      puts "source => #{source}"
      puts "target => #{target}"
      if File::exists?(source)
        File::exists?(target) || FileUtils::ln_s(source, target)
      end
    end

    FileUtils::mkdir_p("spec/fixtures/manifests")
    FileUtils::touch("spec/fixtures/manifests/site.pp")
  end

  desc "Clean up the fixtures directory"
  task :spec_clean do
    fixtures("repositories").each do |remote, opts|
      if opts.instance_of?(String)
        target = opts
      elsif opts.instance_of?(Hash)
        target = opts["target"]
      end
      FileUtils::rm_rf(target)
    end

    fixtures("symlinks").each do |source, target|
      puts "cleaning target => #{target}"
      FileUtils::rm(target)
    end
    site = "spec/fixtures/manifests/site.pp"
    if File::exists?(site) and ! File.size?(site)
      FileUtils::rm("spec/fixtures/manifests/site.pp")
    end
  end
end
