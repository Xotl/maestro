# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# This file is shared between user_data build sequence and box bootstrap sequence.

function GetJson
{
 SaveDebugInfo
 python -c "
import json
import os.path
import sys

if os.path.isfile('$1'):
   json_d=open('$1').read()
   data=json.loads(json_d)
   if '$2' in data.keys():
      print(data['$2'])
      print >> sys.stderr, '$1 - Found: $2 = \"'+data['$2']+'\"'
   else:
      print '$3'
      print >> sys.stderr, 'Key \"$2\" not found. Default value to \"$3\"'
else:
   print '$3'
   print >> sys.stderr, 'Warning! File \"$1\" was not found. Default value to \"$3\"'
"
 RestoreDebugInfo
}

function SaveDebugInfo
{
 DEBUG_INF="$(set -o | grep -e 'xtrace *on' -e 'verbose *on'| sed 's/ *on//g')"
 set -
}

function RestoreDebugInfo
{
 if [ "$DEBUG_INF" != "" ]
 then
    set -o $DEBUG_INF
 fi
}

# make sure that the passed in gitlink is a valid git repository url
function GitLinkCheck
{
 SaveDebugInfo
   _LINK=$1
   if [ "$_LINK" = "" ] || [ "$_LINK" = "default" ] ; then
     # this is a default git url, return non-zero so the caller knows.
     return 2
   fi
   if [ "$(echo $_LINK | grep '://')" = "" ]
   then # Check scp link provided
      if [ "$(echo $_LINK | grep -ie '^.*:[a-z].*$')" = "" ]
      then
           echo "ERROR: $_LINK is not a scp valid format."
           return 1
      else
           return 0
      fi
   else
      # validate we got a valid git URL
      _LINK_PROTOCOL=$(echo $_LINK | awk -F'://' '{printf $1}')
      if   [ "$_LINK_PROTOCOL" = "ssh" ]   ||
           [ "$_LINK_PROTOCOL" = "http" ]  ||
           [ "$_LINK_PROTOCOL" = "https" ] ||
           [ "$_LINK_PROTOCOL" = "git" ]   ||
           [ "$_LINK_PROTOCOL" = "file" ]  ||
           [ "$_LINK_PROTOCOL" = "SSH" ]   ||
           [ "$_LINK_PROTOCOL" = "HTTP" ]  ||
           [ "$_LINK_PROTOCOL" = "HTTPS" ] ||
           [ "$_LINK_PROTOCOL" = "GIT" ]   ||
           [ "$_LINK_PROTOCOL" = "FILE" ]  ; then
           return 0
       else
           echo "ERROR: $_LINK does not have a valid protocol for git"
           return 1
       fi
   fi
 RestoreDebugInfo
}

function Load_test-box_repos()
{
 SaveDebugInfo
 TEST_BOX="$(GetJson $PREFIX/meta.js 'test-box' '')"
 if [ "$TEST_BOX" != "" ]
 then
    echo "Loading test-box data..."
    # Format is : "repo;branch|[...]"
    # Loading in an Array.
    for REPO in $(echo "$TEST_BOX" | sed 's/|/ /g')
    do
       REPO_NAME="$(echo $REPO | awk -F';' '{print $1}')"
       REPO_NAME_BRANCH="$(echo $REPO | awk -F';' '{print $2}')"
       if [ "$REPO_NAME" != "" ] && [ "$REPO_NAME_BRANCH" != "" ]
       then
          TEST_BOX_REPOS["$REPO_NAME"]="$REPO_NAME_BRANCH"
          echo "Test-box: repo '$REPO_NAME' added with '${TEST_BOX_REPOS["$REPO_NAME"]}'"
       fi
    done
 fi
 RestoreDebugInfo
}

function CloneRepo()
{ # $1 is reponame, $2 Default url, $3 Default branch
  # Will wait for the repo and branch to exist, before moving away.
 SaveDebugInfo
 if [ "$1" = "" ] || [ "$2" = "" ] || [ "$3" = "" ]
 then
    echo "ERROR!!! Unable to clone a repo if one of RepoName ($1), Url ($2), branch ($3) are empty"
    return 1
 fi
 GITBRANCH="$3"
 GITNAME="$1"
 GITURL="$2"
 source /etc/environment
 git clone -b $GITBRANCH $GITURL $GITNAME
 test-box $(pwd) $GITNAME $GITNAME
}

function test-box
{
 REPO_NAME="$3"
 GITNAME="$2"
 MODULE_PATH="$1"
 if [ "${TEST_BOX_REPOS[$REPO_NAME]}" != "" ]
 then
    echo "Test-box: Searching for branch '"${TEST_BOX_REPOS[$REPO_NAME]}"' from ~ubuntu/git/${REPO_NAME}.git"
    if [ ! -d ~ubuntu/git/${REPO_NAME}.git ] || [ "$(cd ~ubuntu/git/${REPO_NAME}.git ; git branch | grep '[ *] *'${TEST_BOX_REPOS[$REPO_NAME]})" = "" ]
    then
       # Do never print more than 4 lines waiting. Used by forj cli to detect the need to call test-box.
       set +x
       echo "forj-cli: tb-repo=${REPO_NAME} tb-dir=${MODULE_PATH} tb-root-repo=${GITNAME}"
       echo "build.sh: test-box-repo=${REPO_NAME}"
       echo "Test-box: Waiting for ~ubuntu/git/${REPO_NAME}.git to exist.
On your workstation, you can start test-box.sh --configure <IP> --repo ${REPO_NAME}"
       while [ ! -d ~ubuntu/git/${REPO_NAME}.git ]
       do
          sleep 5
       done
       echo "~ubuntu/git/${REPO_NAME}.git is existing! Waiting for branch to become available."
       cd ~ubuntu/git/${REPO_NAME}.git
       while [ "$(git branch | grep '[ *] *'${TEST_BOX_REPOS[$REPO_NAME]})" = "" ]
       do
          sleep 5
       done
       cd -
       cd "$MODULE_PATH/$GITNAME"
       echo "Test-box: Waiting for remote testing to be created in $(pwd)"
       while [ "$(git remote | grep testing)" = "" ]
       do
          sleep 5
       done
       echo "Test-box: Waiting for branch testing-${TEST_BOX_REPOS[$REPO_NAME]} to be created/attached in $(pwd)"
       while [ "$(git branch | grep "* ${TEST_BOX_REPOS[$REPO_NAME]}")" = "" ]
       do
          sleep 5
       done
       echo "Test-box: $(pwd) is checked out to ${TEST_BOX_REPOS[$REPO_NAME]} branch, connected to ~ubuntu/git/${REPO_NAME}.git ${TEST_BOX_REPOS[$REPO_NAME]}"
       cd -
    else
       cd "$MODULE_PATH/$GITNAME"
       if [ "$(git remote | grep testing)" = "" ]
       then
          git remote add testing /home/ubuntu/git/${REPO_NAME}.git/
       fi
       git fetch testing
       git stash -k -u
       if [ "$(git branch | grep "${TEST_BOX_REPOS[$REPO_NAME]}")" = "" ]
       then
          if [ "$(git branch | grep "* ${TEST_BOX_REPOS[$REPO_NAME]}")" = "" ]
          then
             git checkout ${TEST_BOX_REPOS[$REPO_NAME]}
          fi
          git branch --set-upstream testing/${TEST_BOX_REPOS[$REPO_NAME]} ${TEST_BOX_REPOS[$REPO_NAME]}
       else
          git checkout --track remotes/testing/${TEST_BOX_REPOS[$REPO_NAME]}
       fi
       cd -
    fi
    RestoreDebugInfo
    return 1
 fi
 RestoreDebugInfo
}

# Function that returns the distribution name (Ubuntu, CentOS)
# can be enhanced to return OS revision and nickname
function GetOs
{
  python -c "
import platform
import sys

def linux_distribution():
  try:
    return platform.linux_distribution()
  except:
    return "N/A"


print(str(platform.linux_distribution()[0]))
"
}
# TODO: find if we can source meta.js values from facter since we
#  have all meta.js in facters now.

if [ -f /etc/environment ]
then
   . /etc/environment
fi


# vim:syntax=sh
