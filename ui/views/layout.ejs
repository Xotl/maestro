<!DOCTYPE html>
<html>
  <head>
    <title><%- sails.config.appName %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/linker/styles/bootstrap.css">
    <link rel="stylesheet" href="/linker/styles/vtabs.css">
    <!--STYLES END-->
    
    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/jquery-1.9.0.js"></script>
    <script src="/linker/js/bootstrap.js"></script>
    <script src="/linker/js/bootstrap.min.js"></script>
    <script src="/linker/js/dropdown.js"></script>
    <script src="/linker/js/modal.js"></script>
    <script src="/linker/js/progress_bar.js"></script>
    <script src="/linker/js/tab.js"></script>
    <!--SCRIPTS END-->
    <script>
      $(document).ready(function(){
        $("#register").click(function(){
          $("#body").fadeOut(500, function(){
            $(this).html('');
            $(this).load('../kitops/register', function(){
              $(this).fadeIn(1000);
            });
          });
        });
        $(".forj-logo").click(function(){
          $("#body").fadeOut(500, function(){
            $("#body").load('../home/index');
          }).fadeIn(1000);
        });
      });
    </script>
  </head>

  <body>
    <section class="header">
    <div class="container" style="padding-top: 10px;">
    <div class="row">
        <div class="col-md-1 forj-logo" style="float:left; cursor: pointer; width: 62px; height: 61px; background-image: url('../images/forj.gif');"></div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
          <input type="text" class="form-control search-query" placeholder="Search..."/>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-5">
          <div class="row">
            <div class="col-md-4">
              <div style="background-color: #7DC068;float: left;width: 20px;height: 20px;border-radius: 5px 0px;margin-top: 7px;margin-right: 5px;"></div>
              <h5 style="font-weight: bold;margin-bottom: 0;">System Health</h5>
              <span style="font-size: 10px;">Everything is OK</span>
            </div>
            <div class="col-md-4">
              <div style="background-color: #E16138;float: left;width: 20px;height: 20px;border-radius: 5px 0px;margin-top: 7px;margin-right: 5px;"></div>
              <h5 style="font-weight: bold;margin-bottom: 0;">System Backup</h5>
              <span style="font-size: 10px;">No Backup</span>
            </div>
            <div class="col-md-4">
              <div class="btn-group" style="float:right;">
                <button class="btn btn-default btn-sm dropdown-toggle" type="button" data-toggle="dropdown">
                  More <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                  <li id="register"><a href="#">Register</a></li>
                  <li class="divider"></li>
                  <li><a href="#">Sing out</a></li>
                </ul>
              </div>
            </div>
          </div>
        </div>
    </div>
    </div>
    </section>
    <section id="body" class="container">
      <%- body %>
    </section>

    <footer>
      
    </footer>
    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->



  </body>
</html>