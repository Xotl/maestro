"use strict";
/**
 * Maestro-Users
 *
 * @description :: NodeJS module for maestro to handle the logic for managing users
 */
var ldap = require('ldapjs');
var redis = require('redis');
var async = require('async');
var config = require('./config');

module.exports = {
  get_developers: function(callback){
    get_members_of('developers', callback);
  },
  get_admins: function(callback){
    get_members_of('admins', callback);
  },
  get_operators: function(callback){
    get_members_of('operators', callback);
  },
  get_guest: function(callback){
    get_members_of('guest', callback);
  },
  add_guest_user: function(user, callback){
    var entry = {
      cn: user.full_name,
      sn: user.full_name,
      uid: user.mail,
      mail : user.mail,
      objectClass: [ 'inetOrgPerson', 'organizationalPerson', 'top'],
      userPassword: user.password
    };

    get_service_account(function(err, account){
      if(err){
        callback(err, null);
      }else{
        var client = ldap.createClient({
          url: account.server
        });
        client.bind(account.user, account.password, function(err_bind) {
          if(err_bind){
            callback(err_bind, null);
          }else{
            client.add('uid='+user.mail+',ou=people,' + account.dit, entry, function(err_entry){
              if(err_entry){
                  callback(err_entry, null);
              }else{
                modify_member(user.mail, 'guest', 'add', function(err_add, result_add){
                  if(err_add){
                    callback(err_add, null);
                  }else{
                    callback(null, result_add);
                  }
                });
              }
            });
          }
        });
      }
    });
  },
  add_admin_user: function(user, callback){
    var entry = {
      cn: user.full_name,
      sn: user.full_name,
      uid: user.mail,
      mail : user.mail,
      objectClass: [ 'inetOrgPerson', 'organizationalPerson', 'top'],
      userPassword: user.password
    };

    get_service_account(function(err, account){
      if(err){
        callback(err, null);
      }else{
        var client = ldap.createClient({
          url: account.server
        });
        client.bind(account.user, account.password, function(err_bind) {
          if(err_bind){
            callback(err_bind, null);
          }else{
            client.add('uid='+user.mail+',ou=people,' + account.dit, entry, function(err_entry){
              if(err_entry){
                  callback(err_entry, null);
              }else{
                modify_member(user.mail, 'admins', 'add', function(err_add, result_add){
                  if(err_add){
                    callback(err_add, null);
                  }else{
                    callback(null, result_add);
                  }
                });
              }
            });
          }
        });
      }
    });
  },
  approve_user: function(callback){
    callback();//TODO
  },
  change_group: function(email, to, from, callback){
    modify_member(email, to, 'add', function(err_add, result_add){
      if(err_add){
        console.log('result_add: ' + result_add);
        callback(err_add, null);
      }else{
        modify_member(email, from, 'delete', callback);
      }
    });
  }
};


function get_service_account(callback){
  var client = redis.createClient();

  client.on('error', function(err){
    callback(err, null);
  });

  client.select(config.redisdb, function(){
    async.series({
      user: function(callback_result){
        client.get('ldap_sa_user', function(err, reply){
          if(err){
            callback_result(err, null);
          }else{
            callback_result(null, reply );
          }
        });
      },
      password: function(callback_result){
        client.get('ldap_sa_password', function(err, reply){
          if(err){
            callback_result(err, null);
          }else{
            callback_result(null, reply );
          }
        });
      },
      server: function(callback_result){
        client.get('ldap_server', function(err, reply){
          if(err){
            callback_result(err, null);
          }else{
            callback_result(null, reply );
          }
        });
      },
      dit: function(callback_result){
        client.get('ldap_dit', function(err, reply){
          if(err){
            callback_result(err, null);
          }else{
            callback_result(null, reply );
          }
        });
      }
    }, function(err, results){
      if(err){
        callback(err, null);
      }else{
        callback(null, results);
      }
    });
  });
}


function get_members_of(group, callback){
  get_service_account(function(err, account){
    if(err){
      callback(err, null);
    }else{
      var client = ldap.createClient({
        url: account.server
      });
      client.bind(account.user, account.password, function(err_bind) {
        if(err_bind){
          callback(err_bind, null);
        }else{
          var records = [];
          var opt = {
            filter: 'cn='+group,
            scope: 'sub'
          };
          client.search('ou=groups,'+account.dit, opt, function(err_srch, res){
            if(err_srch){
              console.log('error search: '+err_srch);
              client.unbind(function(err_unbind) {
                if(err_unbind){
                  console.log('LDAP unbind error: '+err_unbind);
                }
              });
            }else{
              res.on('searchEntry', function(entry) {
                var member = entry.object.member;
                if(member){
                  if(Array.isArray(member)){
                    member.forEach(function(member){
                      if(member.substr(0,4) === 'uid='){
                        member = member.split(',')[0].replace('uid=','');
                        records.push(member);
                      }
                    });
                  }else{
                    if(member.substr(0,4) === 'uid='){
                      member = member.split(',')[0].replace('uid=','');
                      records.push(member);
                    }
                  }
                }
              });
              res.on('error', function(err_search) {
                console.error('LDAP failed to retrieve the members of '+group+': ' + err_search.message);
                client.unbind(function(err_unbind) {
                  if(err_unbind){
                    console.log('LDAP unbind error: '+err_unbind);
                  }
                });
                callback(err_search, null);
              });
              res.on('end', function(result) {
                console.log('status: ' + result.status);
                client.unbind(function(err_unbind) {
                  if(err_unbind){
                    console.log('LDAP unbind error: '+err_unbind);
                  }
                });
                callback(null, records);
              });
            }
          });
        }
      });
    }
  });
}


function modify_member(uid, group, action, callback){
  get_service_account(function(err, account){
    if(err){
      callback(err, null);
    }else{
      var client = ldap.createClient({
        url: account.server
      });
      client.bind(account.user, account.password, function(err_bind) {
        if(err_bind){
          console.log('error on bind, '+err_bind);
          callback(err_bind, null);
        }else{
          var change = new ldap.Change({
            operation: action,
            modification: {
              member: 'uid='+uid+',ou=people,'+account.dit
            }
          });
          client.modify('cn='+group+',ou=groups,'+account.dit, change, function(err_modify){
            if(err_modify){
              callback(err_modify, null);
            }else{
              callback(null, true);
            }
          });
        }
      });
    }
  });
}