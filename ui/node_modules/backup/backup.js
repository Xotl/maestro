"use strict";
/**
 * Backup helper
 */

var maestro_exec = require('maestro-exec/maestro-exec');
var yaml = require('js-yaml');
var fs   = require('fs');
var async = require('async');
var yamlObj = null;

module.exports = {
  /*
  callback(error, yamlObj):
    On success: error will be null and yamlObj contains javascript Object with backup-status.yaml data
    On error: error will be not null
  */

  getYamlObj: function(callback) {
    try {
      setYamlObj();
      callback(null, yamlObj);
    } catch (error) {
      callback(error)
    }
  },


  /*
  app: Application Name, example gerrit

  callback(error, retcode):
    On success: error will be null and data has the following items:
      history: history array
      last: Date String
      message: Msg String
      mount-point: String, example /mnt
      path: String
      status: [0: OK, 1: Warning, 2: Error]
      used: Bytes
    On error: error will be not null
  */
  getBackupInfo: function(app, callback) {
    try {
      if (app == undefined || app == ''){
        throw new Error(app + ' is required.');
      }

      setYamlObj();
      var node = getNode(app);

      if (yamlObj.backup[node] == undefined){
        throw new Error(app + ' has no backups (backup.' + node +' doesnt exist in ' + sails.config.env.backups.backup_status_yaml + ').');
      }

      if (yamlObj.backup[node][app] == undefined){
        throw new Error(app + ' has no backups (backup.' + node +'.'+app+' doesnt exist in ' + sails.config.env.backups.backup_status_yaml + ').');
      }

      callback(null, yamlObj.backup[node][app]);

    } catch (error) {
      callback(error)
    }
  },


  /*
  app: Application Name, example gerrit

  callback(error, weeks):
    On success: error will be null and weeks will be a list of available backup weeks
    On error: error will be not null
  */
  getBackupList: function(app, callback) {
    try {
      if (app == undefined || app == ''){
        throw new Error('App is required.');
      }

      setYamlObj();

      var node = getNode(app);

      // Example: /mnt/backups/ci.x7.dev.forj.io/jenkins
      var path = sails.config.env.backups.path + '/' + node + '/' + app;

      if (! fs.existsSync(path)){
        throw new Error(app + ' has no backups at: ' + path + '.');
      }

      callback (null, fs.readdirSync(path));

    } catch (error) {
      callback(error)
    }
  },


  /*
  app: Application Name, example gerrit

  callback(error, stdout, stderr):
    On success: error will be null
    On error: error will be not null
  */
  runBackup: function(app, callback) {
    error = null;
    try {
      if (app == undefined || app == ''){
        throw new Error('App is required.');
      }

      var node = getNode();

      // Example /usr/lib/forj/sbin/runbkp.sh /etc/forj/conf.d/bkp_gerrit.conf
      var minionCmd = sails.config.env.backups.mnt_backups.runbkp_cmd + ' ' + sails.config.env.backups.conf_dir + '/bkp_' + app + '.conf';
      var saltCmd = "sudo -u salt /usr/bin/salt '" + node + "' --out=yaml cmd.retcode \"" + minionCmd +"\"";
      maestro_exec.execCmd(saltCmd, function (error, stdout, stderr) {
        if(error){
          // Salt Error
          callback(new Error(app + ' backup failed (Salt issue).'), stdout, stderr );
        } else {
          if ( stdout==undefined || stdout == '' ){
            // Minion cmd failed
            callback( new Error(app + ' backup failed, cmd: ' + minionCmd), stdout, stderr );
          }

          // Extracting minion retcode
          var retYaml = yaml.safeLoad(stdout);
          if (retYaml[node] == undefined || retYaml[node]!='0'){
            callback( new Error(app + ' backup failed, retcode='+ retYaml[node] +'.'), stdout, stderr );
          }

          callback(null, stdout, stderr);

        }
      });
    } catch (error) {
      callback(error, null, null)
    }
  },


  /*
  callback(error, successMsg):
    On success: error will be null
    On error: error will be not null
  */
  runFullBackup: function(callback) {
    var overallSuccess = true;
    var successMsg = '';
    var errorMsg = '';
    try {
      setYamlObj();

      var services = yamlObj.services;

      if (services == undefined){
        throw new Error ('There are no services in ' + sails.config.env.backups.backup_status_yaml + '.');
      }

      async.forEach(Object.keys(services),
        function(app, callback){
          runBackup(app, function (error) {
            if(error){
              overallSuccess = false;
              errorMsg += app + ' backup failed.\n';
            } else {
              successMsg += app + ' backup completed succesfully.\n';
            }
            // Telling async that we are done
            callback(null);
          });
        },
        // Iteration is done here
        function(err){
          if (overallSuccess == false){
            callback( new Error(errorMsg), null );
          }
          callback (null, successMsg);
        }
      );
    } catch (error) {
      callback(error)
    }
  },


  /*
  app: Application Name, example gerrit

  callback(error, stdout, stderr):
    On success: error will be null
    On error: error will be not null
  */
  restore: function(app, week, callback) {
    try {
      if (app == undefined || app == ''){
        throw new Error('App is required.');
      }

      var node = getNode(app).split(".");
      // Example /usr/lib/forj/sbin/restoreraid.sh -A ci jenkins 2014-30
      var cmd = 'sudo -u salt ' + sails.config.env.backups.restore_cmd + ' -A ' + node[0] + ' ' + app;
      if (week != undefined && week != ''){
        cmd += ' ' + week;
      }
      maestro_exec.execCmd(cmd, function (error, stdout, stderr) {
        if(error){
          callback(error, stdout, stderr);
        } else {
          callback(null, stdout, stderr);
        }
      });
    } catch (error) {
      callback(error, null, null)
    }
  },

  // TODO: Deprecate this function
  get_backup_data: function(){
    var fs   = require('fs');
    try {
      var config = fs.readFileSync('./' + 'config/backup.json');
      config = JSON.parse(config);
      return config;
    } catch (e) {
      return new Error(e.message);
    }
  }

}


// Returns yaml object, or throws exception on error
function setYamlObj(){
  // The file is loaded once.
  if (yamlObj == null){
    if (! fs.existsSync(sails.config.env.backups.backup_status_yaml)){
      throw new Error(sails.config.env.backups.backup_status_yaml + ' is not ready, try again later.');
    }

    var doc = fs.readFileSync(sails.config.env.backups.backup_status_yaml, 'utf8')
    // Remove empty lines that break the yaml
    doc = doc.replace(/^\s*$[\n\r]{1,}/gm, '');
    yamlObj = yaml.safeLoad(doc)
  }
}


// Returns node name String, or throws exception on error
// example: ci.x7.dev.forj.io
function getNode(app){
  if (app == undefined || app == ''){
    throw new Error('app is required in getNode(app)');
  }

  setYaml();
  var node = yamlObj.services[app];

  if (node == undefined || node == ''){
    throw new Error('Missing ' + app + ' service in '  + sails.config.env.backups.backup_status_yaml + '.');
  }

  return String(node);
}