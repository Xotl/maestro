/**
    (c) Copyright 2014 Hewlett-Packard Development Company, L.P.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
"use strict";
/**
 * Metrics helper
 */

var configJson = require('config-json-helper');
var redis = require("redis");

module.exports = {
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getCpu: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = node + ':cpu-usage';
      getRedisValue(key, function (err, result){
        if (err){
          console.error(error);
          callback(null, "-1");  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from cpu-usage check");
            callback(null, "-1");  // There's an error
          }else{
            callback(null, result.toString()); //Success
          }
        }
      });
    } catch (error) {
      callback(error);
    }
  },
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getMemory: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = node + ':memory-usage';
      getRedisValue(key, function (err, result){
        if (err){
          console.error(error);
          callback(null, "-1");  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from memory-usage check");
            callback(null, "-1");  // There's an error
          }else{
            callback(null, result.toString()); //Success
          }
        }
      });
    } catch (error) {
      callback(error);
    }
  },
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getDisk: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = node + ':disk-usage';
      getRedisValue(key, function (err, result){
        if (err){
          console.error(error);
          callback(null, "-1");  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from disk-usage check");
            callback(null, "-1");  // There's an error
          }else{
            callback(null, result.toString()); //Success
          }
        }
      });
    } catch (error) {
      callback(error);
    }
  }
};


// Returns a redis key
function getRedisValue(key, callback) {
  try {
    var client = redis.createClient();
    client.select(1);
    client.get(key, function (err, result) {
      if (err){
        callback(error);
      }
      if (!result){
        callback('redis key: ' + key + ' not found');
      }
      callback(null, result);
    });
  } catch (error) {
    callback(error);
  }finally{
    client.quit();
  }
}