/**
    (c) Copyright 2014 Hewlett-Packard Development Company, L.P.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
"use strict";
/**
 * Metrics helper
 */

var configJson = require('config-json-helper');
var redis = require("redis");
var request = require('request');
var cache = new Object();

module.exports = {
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getCpu: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = 'cpu-usage';
      maestroApiRequest(node, key, function (err, result){
        if (err){
          console.error(err);
          callback(null, undefined);  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from cpu-usage check");
            callback(null, undefined);  // There's an error
          }else{
            callback(null, parseInt(result)); //Success
          }
        }
      });
    } catch (error) {
      console.error(error);
      callback(null, undefined);
    }
  },
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getMemory: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = 'memory-usage';
      maestroApiRequest(node, key, function (err, result){
        if (err){
          console.error(err);
          callback(null, undefined);  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from memory-usage check");
            callback(null, undefined);  // There's an error
          }else{
            callback(null, parseInt(result)); //Success
          }
        }
      });
    } catch (error) {
      console.error(error);
      callback(null, undefined);
    }
  },
  /*
  callback(error):
    On success: error will be null
    On error: error will be not null
  */
  getDisk: function(app, callback) {
    try {
      var node = String(configJson.getNode(app));
      var key = 'disk-usage';
      maestroApiRequest(node, key, function (err, result){
        if (err){
          console.error(err);
          callback(null, undefined);  // There's an error
        }else{
          if (isNaN(result)){
            console.error("Output not expected from disk-usage check");
            callback(null, undefined);  // There's an error
          }else{
            callback(null, parseInt(result)); //Success
          }
        }
      });
    } catch (error) {
      console.error(error);
      callback(null, undefined);
    }
  }
};


//Returns a Redis key
//callback(error, value):
//  On success: error will be null
//  On error: value will be undefined
function maestroApiRequest(node, key, callback) {
  var api = sails.config.env.api;
  var url = api.metric.endpoint + '/metric/' + node + '/' + key;

  if (!node){
    throw new Error('Node is required at maestroApiRequest(node, key, callback)');
  }
    
  if (!key){
    throw new Error('Key is required at maestroApiRequest(node, key, callback)');
  } 
    
  request({
    uri: url,
    method: "GET",
    timeout: api.metric.timeout,
  }, function(error, response, body) {
    if (!error) {
      if (response.statusCode == 200){
        var result = JSON.parse(body);
        if (result && result.metric){  // Success
          setCache(node, key, result.metric);
          callback(null, result.metric);
        }else{
          console.error(url + ' didnt returned a Json metric: ' + body);
          callback(null, undefined);
        }
      } else{
        console.error(url + " response statusCode: " + response.statusCode);
        callback(null, undefined);
      }
    }else{
      if (error.code == 'ETIMEDOUT'){
        console.error('Maestro api timeout reached: ' + api.metric.timeout + ' node:' + node + ' key: ' + key);
        var cachedMetric = undefined
        var retries = 0

        if (cache[node] && cache[node][key] ){
          cachedMetric = cache[node][key]['metric'];
          retries = cache[node][key]['retries'];
          retries++;
          cache[node][key]['retries'] = retries;
        }

        if (retries > api.metric.max_retry){
          console.error(node + ':' + key + ' metric reached max_retry : ' + api.metric.max_retry );
          callback(null, undefined);
        }else if (cachedMetric!=undefined){
          console.error('Using ' + node + ':' + key + ' cached metric: ' + cachedMetric + ' Retries: ' + retries);
          callback(null, cachedMetric);
        }else {
          callback(null, undefined);
        }
      }else{
        console.error(error.message);
        callback(null, undefined);
      }
    }
  });
}


function setCache(node, key, value){
  if (!cache[node]){
    cache[node] = new Object();
  }
  if (!cache[node][key]){
    cache[node][key] = new Object();
  }
  cache[node][key]['metric'] = value;
  cache[node][key]['retries'] = 0;
}


// Returns a Redis key
function getRedisValue(key, callback) {
  try {
    var client = redis.createClient();
    client.select(1);
    client.get(key, function (err, result) {
      if (err){
        console.error(err);
        callback(null, undefined);
      }else if (!result){
        console.error('redis key: ' + key + ' not found');
        callback(null, undefined);
      }else{
        callback(null, result);
      }
    });
  } catch (error) {
    console.error(error);
    callback(null, undefined);
  }finally{
    client.quit();
  }
}