var http = require('http');
var url_parser = require('url');
var request = require('request');
var kit_ops = require('kit-ops');

module.exports = {
  authenticate: function(user, password, callback){
    kit_ops.get_opt('keystone_url', function(error, value){
      if(error){
        sails.log.error('Unable to retrieve the keystone_url value: '+error);
        callback('Unable to retrieve the keystone_url value', null, null);
      }else{
        var payload = { auth: { passwordCredentials: { username: user, password: password } } };
        payload = JSON.stringify(payload);
        var url = value + 'tokens';
        var headers = { 'content-type': 'application/json', 'accept': 'application/json' };
        
        post_request(url, payload, headers, function(error, body, code){
          if(body !== undefined){
            body = JSON.parse(body);
          }
          if(code == 200){
            callback(null, body.access.token.id, code);
          }else if(code == 401){
            callback(body.unauthorized.message, null, code);
          }else{
            callback('Unable to reach the keystone api ('+code+')', null, code);
          }
        });
      }
    });
  }
}
function get_proxy(protocol){
  if(protocol !== 'https:'){
    return (process.env.http_proxy !== null) ? process.env.http_proxy : process.env.HTTP_PROXY;
  }else{
    return (process.env.https_proxy !== null) ? process.env.https_proxy : process.env.HTTPS_PROXY;
  }
}
function get_request(url, headers, timeout, callback){
  var protocol = url_parser.parse(url).protocol;
  var proxy = get_proxy(protocol);
  if(proxy !== undefined){
    request({'url': url , 'proxy': proxy, 'headers': headers, 'timeout': timeout }, function (error, response, body) {
      if (!error && response.statusCode == 200) {
  	    callback(null, body, response.statusCode);
  	  } else {
  	    sails.log.error('Error in get request using proxy settings: '+error);
  	    callback(error, body, response.statusCode);
  	  }
  	});
  }else{
  	request({ 'url': url, 'headers': headers, 'timeout': timeout }, function(error, response, body) {
  		if (!error && response.statusCode == 200) {
  			callback(null, body, response.statusCode);
  		} else {
  		  sails.log.error('Error in get request: '+error);
  			callback(error, body, response.statusCode);
  		}
  	});
  }
}
function post_request(url, payload, headers, callback){
  var protocol = url_parser.parse(url).protocol;
  var proxy = get_proxy(protocol);
  if(proxy !== undefined){
    request.post({ 'url': url, 'proxy': proxy, 'body': payload, 'headers': headers, }, function(error, response, body){
      if (!error && response.statusCode == 200) {
  	    callback(null, body, response.statusCode);
  	  } else {
  	    sails.log.error('Error in post request using proxy settings: '+error);
  	    if(response !== undefined){
  	      callback(error, body, response.statusCode);
  	    }else{
  	      callback(error, body, null);
  	    }
  	  }
    });
  }else{
    request.post({ 'url': url, 'body': payload, 'headers': headers }, function(error, response, body){
      if (!error && response.statusCode == 200) {
  	    callback(null, body, response.statusCode);
  	  } else {
  	    sails.log.error('Error in post request using proxy settings: '+error);
  	    if(response !== undefined){
  	      callback(error, body, response.statusCode);
  	    }else{
  	      callback(error, body, null);
  	    }
  	  }
    });
  }
}